// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import (
	context "context"

	pa "github.com/Lambels/patrickarvatu.com"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: ctx, auth
func (_m *AuthService) CreateAuth(ctx context.Context, auth *pa.Auth) error {
	ret := _m.Called(ctx, auth)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pa.Auth) error); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAuth provides a mock function with given fields: ctx, id
func (_m *AuthService) DeleteAuth(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAuthByID provides a mock function with given fields: ctx, id
func (_m *AuthService) FindAuthByID(ctx context.Context, id int) (*pa.Auth, error) {
	ret := _m.Called(ctx, id)

	var r0 *pa.Auth
	if rf, ok := ret.Get(0).(func(context.Context, int) *pa.Auth); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pa.Auth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAuths provides a mock function with given fields: ctx, filter
func (_m *AuthService) FindAuths(ctx context.Context, filter pa.AuthFilter) ([]*pa.Auth, int, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*pa.Auth
	if rf, ok := ret.Get(0).(func(context.Context, pa.AuthFilter) []*pa.Auth); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pa.Auth)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, pa.AuthFilter) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, pa.AuthFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
