// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import (
	context "context"

	pa "github.com/Lambels/patrickarvatu.com"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserService) CreateUser(ctx context.Context, user *pa.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pa.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserService) DeleteUser(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserByID provides a mock function with given fields: ctx, id
func (_m *UserService) FindUserByID(ctx context.Context, id int) (*pa.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *pa.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *pa.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pa.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUsers provides a mock function with given fields: ctx, filter
func (_m *UserService) FindUsers(ctx context.Context, filter pa.UserFilter) ([]*pa.User, int, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*pa.User
	if rf, ok := ret.Get(0).(func(context.Context, pa.UserFilter) []*pa.User); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pa.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, pa.UserFilter) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, pa.UserFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUser provides a mock function with given fields: ctx, update
func (_m *UserService) UpdateUser(ctx context.Context, update pa.UserUpdate) (*pa.User, error) {
	ret := _m.Called(ctx, update)

	var r0 *pa.User
	if rf, ok := ret.Get(0).(func(context.Context, pa.UserUpdate) *pa.User); ok {
		r0 = rf(ctx, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pa.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pa.UserUpdate) error); ok {
		r1 = rf(ctx, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
